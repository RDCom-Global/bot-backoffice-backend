AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  bot-backoffice-backend

  Sample SAM Template for bot-backoffice-backend


Globals:
  Api:
      Cors:
        AllowHeaders: '''*'''
        AllowOrigin: '''*'''
        AllowCredentials: '''*'''
        AllowMethods: '''*'''
  Function:
    Timeout: 300
    Environment:
        Variables:
          ENV: !Ref Environment
          REGION_COGNITO: !Sub '{{resolve:ssm:/rdcmanager-backoffice-${Environment}/regionCognito}}'
          POOLS_USER_ID: !Sub '{{resolve:ssm:/rdcmanager-backoffice-${Environment}/poolsUserId}}'
          POOLS_WEB_CLINT_ID: !Sub '{{resolve:ssm:/rdcmanager-backoffice-${Environment}/poolsWebClintId}}'

Parameters:
  Environment:
    Type: String

Resources:
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "LambdaRoleBackoffice-${Environment}"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: 
                - lambda.amazonaws.com
            Action: 
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::293854028872:policy/access2Parameter

  MyApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: !Sub ${Environment}
      Cors:
        AllowHeaders: '''*'''
        AllowOrigin: '''*'''
        AllowCredentials: '''*'''
        AllowMethods: '''*'''
      Auth:
          DefaultAuthorizer: MyAuthorizer
          AddDefaultAuthorizerToCorsPreflight: false
          Authorizers:
            MyAuthorizer:
              FunctionArn: !GetAtt Authorizer.Arn
        
  Authorizer:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: utils/authorizer/
      Handler: app.lambda_handler
      Runtime: python3.11
      Architectures:
        - x86_64
  
  PathologiesGetSearchByCategoryPathology:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: pathologies_get_search_by_category_pathology/
      Handler: app.lambda_handler
      Runtime: python3.11
      Layers:
        - arn:aws:lambda:us-east-2:293854028872:layer:psql_layer:4
      Architectures:
        - x86_64
      Events:
        PathologiesGetSearchByCategoryPathology:
          Type: Api 
          Properties:
            RestApiId: !Ref MyApi
            Path: /pathologiesSearchbycategory
            Method: get
  PathologiesGetSearchByTwoSymptomsPathology:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: pathologies_get_search_by_two_symptoms_pathology/
      Handler: app.lambda_handler
      Runtime: python3.11
      Layers:
        - arn:aws:lambda:us-east-2:293854028872:layer:psql_layer:4
      Architectures:
        - x86_64
      Events:
        PathologiesGetSearchByTwoSymptomsPathology:
          Type: Api 
          Properties:
            RestApiId: !Ref MyApi
            Path: /pathologiesSearchbytwosymptoms
            Method: get
  PathologiesGetSearchByThreeSymptomsPathology:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: pathologies_get_search_by_three_symptoms_pathology/
      Handler: app.lambda_handler
      Runtime: python3.11
      Layers:
        - arn:aws:lambda:us-east-2:293854028872:layer:psql_layer:4
      Architectures:
        - x86_64
      Events:
        PathologiesGetSearchByThreeSymptomsPathology:
          Type: Api 
          Properties:
            RestApiId: !Ref MyApi
            Path: /pathologiesSearchbythreesymptoms
            Method: get
  
  SymptomsGetSearchByCategorySymptom:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: symptoms_get_search_by_category_symptom/
      Handler: app.lambda_handler
      Runtime: python3.11
      Layers:
        - arn:aws:lambda:us-east-2:293854028872:layer:psql_layer:4
      Architectures:
        - x86_64
      Events:
        SymptomsGetSearchByCategorySymptom:
          Type: Api 
          Properties:
            RestApiId: !Ref MyApi
            Path: /symptomsSearchbycategory
            Method: get
            
## New Refactor
  Pathologies:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: pathologies/
      Handler: app.lambda_handler
      Runtime: python3.11
      Layers:
        - arn:aws:lambda:us-east-2:293854028872:layer:psql_layer:4
      Architectures:
        - x86_64
      Events:
          Pathologies:
            Type: Api 
            Properties:
              RestApiId: !Ref MyApi
              Path: /pathologies
              Method: POST

  Symptoms:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: symptoms/
      Handler: app.lambda_handler
      Runtime: python3.11
      Layers:
        - arn:aws:lambda:us-east-2:293854028872:layer:psql_layer:4
      Architectures:
        - x86_64
      Events:
          Symptoms:
            Type: Api 
            Properties:
              RestApiId: !Ref MyApi
              Path: /symptoms
              Method: POST

  Categories:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: categories/
      Handler: app.lambda_handler
      Runtime: python3.11
      Layers:
        - arn:aws:lambda:us-east-2:293854028872:layer:psql_layer:4
      Architectures:
        - x86_64
      Events:
          Categories:
            Type: Api 
            Properties:
              RestApiId: !Ref MyApi
              Path: /categories
              Method: POST